/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bakingcalculator;

import static bakingcalculator.BakingCalculator.amtBought;
import static bakingcalculator.BakingCalculator.amtUsed;
import static bakingcalculator.BakingCalculator.mmtUsed;
import static bakingcalculator.BakingCalculator.amtCost;
import static bakingcalculator.BakingCalculator.mmtBought;
import static bakingcalculator.BakingCalculator.recipes;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListModel;

/**
 *
 * @author christianiannone
 */
public class CalcInterface extends javax.swing.JFrame {

    /**
     * Creates new form CalcInterface
     */
    public CalcInterface() throws SQLException {
        initComponents();
        createConnection();
        fillNameList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calcPanel = new javax.swing.JPanel();
        ddbMmtBought = new javax.swing.JComboBox();
        ddbMmtUsed = new javax.swing.JComboBox();
        mmtBoughtLbl = new javax.swing.JLabel();
        amtBoughtLbl = new javax.swing.JLabel();
        amtCostLbl = new javax.swing.JLabel();
        mmtUsedLbl = new javax.swing.JLabel();
        amtUsedLbl = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        errLbl = new javax.swing.JLabel();
        txtAmtBought = new javax.swing.JTextField();
        txtAmtCost = new javax.swing.JTextField();
        txtAmtUsed = new javax.swing.JTextField();
        ddbViewRecipe = new javax.swing.JComboBox<>();
        btnChooseRecipe = new javax.swing.JButton();
        btnDeleteRecipe = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        recipeList = new javax.swing.JList<>();
        totalChargeLbl = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtRecipeName = new javax.swing.JTextField();
        nameLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        ddbMmtBought.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cup", "gal", "lit", "mil", "flo", "pint", "qrt", "tbsp", "tsp" }));
        ddbMmtBought.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddbMmtBoughtActionPerformed(evt);
            }
        });

        ddbMmtUsed.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cup", "gal", "lit", "mil", "flo", "pint", "qrt", "tbsp", "tsp" }));
        ddbMmtUsed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddbMmtUsedActionPerformed(evt);
            }
        });

        mmtBoughtLbl.setText("Measurement Bought");

        amtBoughtLbl.setText("Amount Bought");

        amtCostLbl.setText("Amount Cost");

        mmtUsedLbl.setText("Measurement Used");

        amtUsedLbl.setText("Amount Used");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        ddbViewRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddbViewRecipeActionPerformed(evt);
            }
        });

        btnChooseRecipe.setText("Choose");
        btnChooseRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseRecipeActionPerformed(evt);
            }
        });

        btnDeleteRecipe.setText("Delete Recipe");
        btnDeleteRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRecipeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calcPanelLayout = new javax.swing.GroupLayout(calcPanel);
        calcPanel.setLayout(calcPanelLayout);
        calcPanelLayout.setHorizontalGroup(
            calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(calcPanelLayout.createSequentialGroup()
                                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(amtCostLbl, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mmtUsedLbl, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(177, 177, 177))
                            .addGroup(calcPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(amtUsedLbl)
                                .addGap(205, 205, 205)))
                        .addGroup(calcPanelLayout.createSequentialGroup()
                            .addComponent(amtBoughtLbl)
                            .addGap(195, 195, 195)))
                    .addGroup(calcPanelLayout.createSequentialGroup()
                        .addComponent(mmtBoughtLbl)
                        .addGap(167, 167, 167)))
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, calcPanelLayout.createSequentialGroup()
                        .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAmtBought)
                            .addComponent(ddbMmtBought, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, calcPanelLayout.createSequentialGroup()
                        .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAmtCost, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAmtUsed, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ddbMmtUsed, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDeleteRecipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChooseRecipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ddbViewRecipe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        calcPanelLayout.setVerticalGroup(
            calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mmtBoughtLbl)
                    .addComponent(ddbMmtBought, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amtBoughtLbl)
                    .addComponent(txtAmtBought, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amtCostLbl)
                    .addGroup(calcPanelLayout.createSequentialGroup()
                        .addComponent(txtAmtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mmtUsedLbl)
                            .addComponent(ddbMmtUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amtUsedLbl)
                            .addComponent(txtAmtUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19)
                .addComponent(btnSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errLbl)
                .addGap(18, 18, 18)
                .addComponent(ddbViewRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChooseRecipe)
                .addGap(13, 13, 13)
                .addComponent(btnDeleteRecipe)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(recipeList);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        nameLbl.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calcPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(totalChargeLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(57, 57, 57))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalChargeLbl)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(calcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultListModel dlm = new DefaultListModel();
    DefaultComboBoxModel dbm = new DefaultComboBoxModel();

    private static final String USERNAME = "cai";
    private static final String PASSWORD = "cai122893";
    private static final String CONN_STRING = "jdbc:derby:recipedb";

    String total;
    String amtDelete;
    String aD;
    String recipeName;
    String mmt;

    boolean nameExists = true;

    int recipeId;
    int pKey;

    double charge;
    double amt;
    double numDel;
    double totalCharge = 0;

    private static Connection conn;
    private PreparedStatement pstmt;
    
    public static void createConnection(){
        try {
            conn = DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);
            System.out.println("Connected!");
        } catch (SQLException ex) {
            System.err.println(ex);
        }
    }

    public String getRecipeName() {
        return recipeName;
    }

    public String getIngredientMmt() {
        return mmtUsed;
    }

    public Double getAmountUsed() {
        return amtUsed;
    }

    public Double getIngredientCost() {
        return amtCost;
    }

    public void getRecipeInfo() {
        String recipe = "SELECT id FROM cai.recipes WHERE recipe = ?";
        String info = "SELECT measurement, cost, amount FROM cai.ingredients WHERE id = ?";
        recipeName = (String) ddbViewRecipe.getSelectedItem();
        int id = 0;
        try {
            pstmt = conn.prepareStatement(recipe);
            pstmt.setString(1, recipeName);
            ResultSet rset = pstmt.executeQuery();
            if (rset.next()) {
                id = rset.getInt(1);
            }
        } catch (SQLException ex) {
            System.out.println("could not get recipe ID");
        }

        try {
            pstmt = conn.prepareStatement(info);
            pstmt.setInt(1, id);
            ResultSet rset = pstmt.executeQuery();
            totalCharge = 0;
            NumberFormat formatter = NumberFormat.getCurrencyInstance();
            while (rset.next()) {
                mmt = rset.getString(1);
                charge = Double.parseDouble(rset.getString(2));
                totalCharge = totalCharge + charge;
                amt = rset.getDouble(3);
                dlm.addElement("Amt: " + amt + " Mmt: " + mmt + " Cost: " + formatter.format(charge));
            }
            txtRecipeName.setText(recipeName);
            recipeList.setModel(dlm);

            total = String.valueOf(formatter.format(totalCharge));
            totalChargeLbl.setText("Total to charge: " + total);
        } catch (SQLException ex) {
            System.out.println("unable to retrieve recipe info");
        }
    }

    public String fillNameList() throws SQLException {
        String rName = "select recipe from cai.recipes";

        pstmt = conn.prepareStatement(rName);

        ResultSet rset = pstmt.executeQuery();

        String name;
        while (rset.next()) {
            name = rset.getString(1);
            ddbViewRecipe.addItem(name);
        }
        return rName;
    }

    public Integer checkName() {
        return 0;
    }

    public String updateNameList() {
        List<String> names = new ArrayList<String>();
        String rName = null;
        int count = ddbViewRecipe.getItemCount();
        for (int i = 0; i < count; i++) {
            rName = ddbViewRecipe.getItemAt(i);
            names.add(rName);
        }
        if (names.contains(recipeName)) {
            //doesnt add to dropdown list
        } else {
            ddbViewRecipe.addItem(recipeName);
        }
        return rName;
    }

    public Integer getPrimaryKey() throws SQLException {
        String primaryKey = "select id from cai.recipes";

        pstmt = conn.prepareStatement(primaryKey);

        ResultSet rset = pstmt.executeQuery();

        int key = 0;
        while (rset.next()) {
            pKey = rset.getInt(1);
            if (key == pKey) {
                key++;
            } else {
                nameExists = false;
                break;
            }
        }
        return key;
    }

    public Integer getRecipeId() throws SQLException {
        String recipeKey = "select id from cai.recipes where recipe = ?";

        pstmt = conn.prepareStatement(recipeKey);
        pstmt.setString(1, recipeName);

        ResultSet rset = pstmt.executeQuery();

        if (rset.next()) {
            recipeId = rset.getInt(1);
        }else{
            recipeId = -1;
        }

        return recipeId;
    }

    public void clearContents() {
        txtRecipeName.setText("");
        txtAmtBought.setText("");
        txtAmtCost.setText("");
        txtAmtUsed.setText("");
        dlm.removeAllElements();
        totalChargeLbl.setText("Total to charge: ");
    }

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        try {
            boolean isValid = true;
            boolean isLessThan = true;
            errLbl.setText("");
            amtBought = 0;
            amtCost = 0;
            amtUsed = 0;

            //mmtBought
            mmtBought = ddbMmtBought.getSelectedItem().toString();
            //amtBought
            String aB = txtAmtBought.getText();
            try {
                amtBought = Double.parseDouble(aB);
            } catch (NumberFormatException ex) {
                isValid = false;
                errLbl.setText("Please enter a valid number for Amount Bought.");
            }
            //amtCost
            String aC = txtAmtCost.getText();
            try {
                amtCost = Double.parseDouble(aC);
            } catch (NumberFormatException ex) {
                if (errLbl.getText().isEmpty()) {
                    isValid = false;
                    errLbl.setText("Please enter a valid number for Amount Cost.");
                }
            }
            //mmtUsed
            mmtUsed = ddbMmtUsed.getSelectedItem().toString();
            //amtUsed
            String aU = txtAmtUsed.getText();
            try {
                amtUsed = Double.parseDouble(aU);
            } catch (NumberFormatException ex) {
                if (errLbl.getText().isEmpty()) {
                    isValid = false;
                    errLbl.setText("Please enter a valid number for Amount Used.");
                }
            }
            System.out.println(isValid);
            if (isValid) {
                //return value of stored method
                Callable num = recipes.get(mmtUsed + mmtBought);
                double numCall = (double) num.call();
                if (numCall > 1) {
                    isLessThan = false;
                    errLbl.setText("You used more than you bought.");
                } else {
                    double amtCharge = numCall * amtCost;
                    NumberFormat formatter = NumberFormat.getCurrencyInstance();

                    dlm.addElement("Amt: " + amtUsed + " Mmt: " + mmtUsed + " Cost: " + formatter.format(amtCharge));
                    recipeList.setModel(dlm);

                    totalCharge = totalCharge + amtCharge;
                    total = String.valueOf(formatter.format(totalCharge));
                    totalChargeLbl.setText("Total to charge: " + total);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(CalcInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void ddbMmtBoughtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddbMmtBoughtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ddbMmtBoughtActionPerformed

    private void ddbMmtUsedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddbMmtUsedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ddbMmtUsedActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        amtDelete = (String) dlm.get(recipeList.getSelectedIndex());
        aD = amtDelete.substring(amtDelete.indexOf('$') + 1);
        numDel = Double.parseDouble(aD);
        totalCharge = totalCharge - numDel;

        NumberFormat formatter = NumberFormat.getCurrencyInstance();
        total = String.valueOf(formatter.format(totalCharge));
        totalChargeLbl.setText("Total to charge: " + total);

        dlm.remove(recipeList.getSelectedIndex());
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        recipeName = txtRecipeName.getText();
        ListModel model = recipeList.getModel();
        int rId = 0;
        try {
            rId = getRecipeId();
        } catch (SQLException ex) {
            Logger.getLogger(CalcInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        String clearIngredients = "DELETE FROM cai.ingredients WHERE id = ?";

        try {
            pstmt = conn.prepareStatement(clearIngredients);
            pstmt.setInt(1, rId);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println(ex);
        }

        String insertRecipe = "INSERT INTO CAI.RECIPES (ID, RECIPE) VALUES(?,?)";
        String insertIngredients = "insert into cai.ingredients (id,measurement,cost,amount) values(?,?,?,?)";

        try {
            getRecipeId();
            System.out.println(recipeId);
        } catch (SQLException ex) {
            System.out.println("didnt get recipe id");
        }
        if (recipeId == -1) {
            //recipe name insert
            try {
                //primary key
                int key = getPrimaryKey();
                //recipe name
                String recipe = getRecipeName();
                pstmt = conn.prepareStatement(insertRecipe);
                pstmt.setInt(1, key);
                pstmt.setString(2, recipe);
                pstmt.executeUpdate();
            } catch (SQLException ex) {
                ex.printStackTrace();
                errLbl.setText("There was an issue saving this recipe: " + ex.getMessage());
            }
        }
        //ingredients insert
        try {
            //recipe id
            int id = getRecipeId();

            for (int i = 0; i < model.getSize(); i++) {
                //splice list elements
                Object o = model.getElementAt(i);
                String ingredient = o.toString();
                int a = ingredient.indexOf("Amt: ");
                int m = ingredient.indexOf("Mmt: ");
                int c = ingredient.indexOf("Cost: ");
                String amt = ingredient.substring(a + 5, m - 1);
                double amnt = Double.parseDouble(amt);
                String mmt = ingredient.substring(m + 5, c - 1);
                String cst = ingredient.substring(c + 7);
                //insert
                pstmt = conn.prepareStatement(insertIngredients);
                pstmt.setInt(1, id);
                pstmt.setString(2, mmt);
                pstmt.setString(3, cst);
                pstmt.setDouble(4, amnt);
                pstmt.execute();
            }
            clearContents();

        } catch (SQLException ex) {
            ex.printStackTrace();
            errLbl.setText("There was an issue saving this recipe: " + ex.getMessage());
        }

        updateNameList();
        totalCharge = 0;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ddbViewRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddbViewRecipeActionPerformed

    }//GEN-LAST:event_ddbViewRecipeActionPerformed

    private void btnChooseRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseRecipeActionPerformed
        clearContents();
        getRecipeInfo();
    }//GEN-LAST:event_btnChooseRecipeActionPerformed

    private void btnDeleteRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRecipeActionPerformed
        //delete ingredients
        recipeName = txtRecipeName.getText();
        ListModel model = recipeList.getModel();
        int rId = 0;
        try {
            rId = getRecipeId();
        } catch (SQLException ex) {
            Logger.getLogger(CalcInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        String clearIngredients = "DELETE FROM cai.ingredients WHERE id = ?";

        try {
            pstmt = conn.prepareStatement(clearIngredients);
            pstmt.setInt(1, rId);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        
        //delete recipe
        String deleteRecipe = "DELETE FROM cai.recipes WHERE id = ?";
        
        try {
            pstmt = conn.prepareStatement(deleteRecipe);
            pstmt.setInt(1, rId);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        clearContents();
    }//GEN-LAST:event_btnDeleteRecipeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalcInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalcInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalcInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalcInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CalcInterface().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(CalcInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amtBoughtLbl;
    private javax.swing.JLabel amtCostLbl;
    private javax.swing.JLabel amtUsedLbl;
    private javax.swing.JButton btnChooseRecipe;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteRecipe;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JPanel calcPanel;
    private javax.swing.JComboBox ddbMmtBought;
    private javax.swing.JComboBox ddbMmtUsed;
    private javax.swing.JComboBox<String> ddbViewRecipe;
    private javax.swing.JLabel errLbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mmtBoughtLbl;
    private javax.swing.JLabel mmtUsedLbl;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JList<String> recipeList;
    private javax.swing.JLabel totalChargeLbl;
    private javax.swing.JTextField txtAmtBought;
    private javax.swing.JTextField txtAmtCost;
    private javax.swing.JTextField txtAmtUsed;
    private javax.swing.JTextField txtRecipeName;
    // End of variables declaration//GEN-END:variables
}
